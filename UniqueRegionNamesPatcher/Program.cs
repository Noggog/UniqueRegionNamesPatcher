using Mutagen.Bethesda;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Order;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Noggog;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace UniqueRegionNamesPatcher
{
    public class Program
    {
        private static Lazy<Settings> _lazySettings = null!;
        private static Settings Settings => _lazySettings.Value;


        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .SetAutogeneratedSettings("Settings", "settings.json", out _lazySettings, false)
                .Run(args);
        }

        public static FormLink<IRegionGetter>[] GetAssociatedRegions(int x, int y)
        {
            switch (x)
            {
            case 0:
                switch (y)
                {
                case 0: // 0,0
                    return new[] { UniqueRegionNames.Region.xxxMapWhiterunHold, UniqueRegionNames.Region.xxxMapPale };
                case 1: // 0,1
                    return new[] { UniqueRegionNames.Region.xxxMapWhiterunHold, UniqueRegionNames.Region.xxxMapPale };
                case 2: // 0,2
                    return UniqueRegionNames.Region.xxxMapPale;
                case 3: // 0,3
                default:return null;
                }
                break;
            case 1:
                switch (y)
                {
                case 0: // 1,0
                case 1: // 1,1
                case 2: // 1,2
                case 3: // 1,3
                default: return null;
                }
                break;
            case 2:
                switch (y)
                {
                case 0: // 2,0
                case 1: // 2,1
                case 2: // 2,2
                case 3: // 2,3
                default: return null;
                }
                break;
            case 3:
                switch (y)
                {
                case 0: // 3,0
                case 1: // 3,1
                case 2: // 3,2
                case 3: // 3,3
                default: return null;
                }
                break;
            default:
                return null;
            }
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Console.WriteLine("=== Patcher Begin ===");

            long changeCount = 0;

            IModListing<ISkyrimModGetter>? uniqueRegionNames = null;

            foreach (var mod in state.LoadOrder.PriorityOrder)
            {
                if (!mod.Enabled || mod.Ghosted)
                    continue;
                if (mod.ModKey == UniqueRegionNames.ModKey)
                {
                    uniqueRegionNames = mod;
                }
            }

            if (uniqueRegionNames == null)
                throw new Exception($"Missing \'{UniqueRegionNames.ModKey.Name}\'!");
            else if (uniqueRegionNames.Mod == null)
                throw new Exception($"Found \'{UniqueRegionNames.ModKey.Name}\', but it was null!");
            else Console.WriteLine($"Found \'{UniqueRegionNames.ModKey.Name}\'");

            var urnTamriel = uniqueRegionNames.Mod.Worldspaces.First(wrld => wrld.EditorID == "Tamriel").DeepCopy();
            var stateTamriel = state.LoadOrder.PriorityOrder.Worldspace().WinningOverrides().First(wrld => wrld.EditorID == "Tamriel").DeepCopy();

            var intersectBlocks = urnTamriel.SubCells.Intersect(stateTamriel.SubCells);

            foreach (var block in intersectBlocks)
            {
                foreach (var subBlock in block.Items)
                {
                    var primaryRegion = GetAssociatedRegion(subBlock.BlockNumberX, subBlock.BlockNumberY);
                    
                }
            }

            //ISkyrimGroupGetter<IWorldspaceGetter> urnWorldspaces => uniqueRegionNames.Mod.Worldspaces;

            //foreach (IWorldspaceGetter wrld in state.LoadOrder.PriorityOrder.Worldspace().WinningContextOverrides())
            //{
            //    if (wrld.EditorID == null || wrld.SubCells.Count == 0)
            //        continue;

            //    IWorldspaceGetter? urnWRLD = urnWorldspaces.FirstOrDefault(w => w == wrld, null);

            //    if (urnWRLD == null)
            //    {
            //        Console.WriteLine($"Skipping worldspace \'{wrld.EditorID}\' because it isn't present in \'{UniqueRegionNames.ModKey.Name}\'");
            //        continue;
            //    }
            //    else
            //        Console.WriteLine($"Processing worldspace \'{wrld.EditorID}\'");

            //    long changeCountCopy = changeCount;
            //    var wrldCopy = wrld.DeepCopy();


            //    //// iterate through blocks
            //    //foreach (IWorldspaceBlockGetter block in wrldCopy.SubCells)
            //    //{
            //    //    if (block == null || block.Items.Count == 0)
            //    //        continue;

            //    //    int blockCopyChange = 0;
            //    //    var blockCopy = block.DeepCopy();

            //    //    // iterate through subblocks
            //    //    foreach (IWorldspaceSubBlockGetter subBlock in blockCopy.Items)
            //    //    {
            //    //        if (subBlock == null || subBlock.Items.Count == 0)
            //    //            continue;

            //    //        int subBlockChanges = 0;
            //    //        var subBlockCopy = subBlock.DeepCopy();

            //    //        foreach (ICellGetter cell in subBlockCopy.Items)
            //    //        {
            //    //            if (cell.Regions == null || cell.Regions.Count == 0)
            //    //                continue;

            //    //        }

            //    //        if (subBlockChanges > 0)
            //    //            blockCopy.Items.SetTo(subBlockCopy);
            //    //    }

            //    //    if (blockCopyChange > 0)
            //    //    {
            //    //        wrldCopy.SubCells.SetTo(blockCopy);
            //    //        ++changeCount;
            //    //    }
            //    //}

            //    if (changeCount != changeCountCopy)
            //    {
            //        state.PatchMod.Worldspaces.Set(wrldCopy);
            //        Console.WriteLine($"Successfully added worldspace \'{wrld.EditorID}\' to the patch.");
            //    }
            //}

            Console.WriteLine("=== Diagnostics ===");

            if (changeCount > 0)
                Console.WriteLine($"Patched {changeCount} records.");
            else Console.WriteLine("No changes were made, something probably went wrong!");

            Console.WriteLine("=== Patcher Complete ===");
        }
    }
}

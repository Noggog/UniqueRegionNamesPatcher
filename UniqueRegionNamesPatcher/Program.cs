using Mutagen.Bethesda;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Order;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Noggog;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using UniqueRegionNamesPatcher.UniqueRegionNames;
using UniqueRegionNamesPatcher.util;
using UniqueRegionNamesPatcher.util.Enum;

namespace UniqueRegionNamesPatcher
{
    public class Program
    {
        private static Lazy<Settings> _lazySettings = null!;
        private static Settings Settings => _lazySettings.Value;

        private static Dictionary<HoldCapital, FormLink<IRegionGetter>> HoldCapitalLookup = new()
        {
            { HoldCapital.Solitude, UniqueRegionNames.UniqueRegionNames.Region.xxxMapHaafingar },
            { HoldCapital.Morthal, UniqueRegionNames.UniqueRegionNames.Region.xxxMapHaafingar },
            { HoldCapital.Markarth, UniqueRegionNames.UniqueRegionNames.Region.xxxMapHaafingar },
            { HoldCapital.Whiterun, UniqueRegionNames.UniqueRegionNames.Region.xxxMapHaafingar },
            { HoldCapital.Falkreath, UniqueRegionNames.UniqueRegionNames.Region.xxxMapHaafingar },
            { HoldCapital.Dawnstar, UniqueRegionNames.UniqueRegionNames.Region.xxxMapHaafingar },
            { HoldCapital.Winterhold, UniqueRegionNames.UniqueRegionNames.Region.xxxMapHaafingar },
            { HoldCapital.Windhelm, UniqueRegionNames.UniqueRegionNames.Region.xxxMapHaafingar },
            { HoldCapital.Riften, UniqueRegionNames.UniqueRegionNames.Region.xxxMapRift },
        };

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .SetAutogeneratedSettings("Settings", "settings.json", out _lazySettings, false)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Console.WriteLine("=== Patcher Begin ===");

            long changeCount = 0;

            IModListing<ISkyrimModGetter>? uniqueRegionNames = null;

            foreach (var mod in state.LoadOrder.PriorityOrder)
            {
                if (!mod.Enabled || mod.Ghosted)
                    continue;
                if (mod.ModKey == UniqueRegionNames.UniqueRegionNames.ModKey)
                {
                    uniqueRegionNames = mod;
                }
            }

            Matrix lookup = new();

            if (uniqueRegionNames == null)
                throw new Exception($"Missing \'{UniqueRegionNames.UniqueRegionNames.ModKey.Name}\'!");
            else if (uniqueRegionNames.Mod == null)
                throw new Exception($"Found \'{UniqueRegionNames.UniqueRegionNames.ModKey.Name}\', but it was null!");
            else Console.WriteLine($"Found \'{UniqueRegionNames.UniqueRegionNames.ModKey.Name}\'");

            var urnTamriel = uniqueRegionNames.Mod.Worldspaces.First(wrld => wrld.EditorID == "Tamriel").DeepCopy();
            var stateTamriel = state.LoadOrder.PriorityOrder.Worldspace().WinningOverrides().First(wrld => wrld.EditorID == "Tamriel").DeepCopy();

            var intersectBlocks = urnTamriel.SubCells.Intersect(stateTamriel.SubCells);

            foreach (var block in intersectBlocks)
            {
                foreach (var subBlock in block.Items)
                {
                    lookup.Get(subBlock.BlockNumberX, subBlock.BlockNumberY);
                }
            }

            Console.WriteLine("=== Diagnostics ===");

            if (changeCount > 0)
                Console.WriteLine($"Patched {changeCount} records.");
            else Console.WriteLine("No changes were made, something probably went wrong!");

            Console.WriteLine("=== Patcher Complete ===");
        }
    }
}
